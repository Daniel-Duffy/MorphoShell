slideStiffnessPrefactor = 0.6;
slideSpeedPrefactor = 0.8;
slideFrictionCoeff = 0.0;
ThicknessesAboveLowestNodeToClampUpTo = -1.0;
DoNoDialling = false;
GlassCones = false;

ImposeSeideDeformations = false;
pSpeedPrefactor = -99.9;
testTriangle = 0;

controlledForce = true;
slideWeightDialSpeedFac = 0.0//10000.0;
totalSlideForceToMuTSqRatioEquilThreshold = -99999.9//0.0004;
InitialSlideWeightForCtrldForceInUnitsOfMuTsq = 0.5; // Slightly below buckling load.


constSlideWeightFac = -999.0;
SpacerHeight = -1.0;

// -5.95055447037696e-01 5.83446602837965e-01 3.65669505051669e-03 4.14855014043191e-01 -8.16629448390912e-02 0 5.96412782791744e-01
SpecifyInitSlideZCoord_upper = 4.14855014043191e-01;
SpecifyInitSlideZCoord_lower = -8.16629448390912e-02;

// When doing controlled displacement with increments (waiting for equil each time), this controls increment size.
dispIncFac = 0.02//0.003;

/* Dimensionless tunable setting, that sets roughly how many output files
will be generated over the course of one dial-in step. Output will be printed
every DialInStepTime / Timestep, rounded to the nearest integer > 0. Must be
specified with a decimal point as it is a double. Switch off these prints
entirely by setting PrintFrequency to a negative number. Currently
PrintFrequency values in [0.0, 1.0) are not permitted.*/
PrintFrequency = 10.0;

LCEMode = true;

/* Bool to determine whether the old, simpler secFF estimate is used instead
of the newer least-squares based one. */
UseOldSecFF = true;

/* Bool to determine whether or not the output files include stretching and
bending energy densities for each triangle in addition to curvatures.*/
PrintEnergyDensities = true;

/* Bool to determine whether or not the output files include triangle areas.*/
PrintTriAreas = true;

/* Bool to determine whether or not the output files include the 'angular
deficit' for each node.*/
PrintAngleDeficits = true;

/* Force (largest) to characteristic force and speed (largest) to sound
speed ratios below which system is considered to be in equilbirum. */
Equil_Force_To_CharForce_Ratio_Threshold = 0.0; // standard val 0.000005;
Equil_Speed_To_SoundSpeed_Ratio_Threshold = 0.0; // standard val 0.00005;

/* Bool determining whether Gradient Descent dynamics are used as opposed to
the default Newtonian Dynamics. Gradient Descent is equivalent to fully
overdamped Newtonian Dynamics, i.e. with no inertial term in the equation
of motion, giving (for linear damping):
velocity = non-damping force / damping coefficient,
where damping coefficient = mass*NumDampFactor/InitDensity in this code.*/
UseGradientDescentDynamics = false;

/* When this bool is set to true, the progMetric and
progSecFF that we would normally be dialling FROM at the start of the run,
(the flat sheet trivial programmed tensors, or *possibly* those from a later
point in the progTensors sequence if an ansatz was used) are
just set to the values they would be dialling TO, so that no dialling
of these quantities happens between the intial (starting) entry in
the progTensor sequence and the next. progTau however IS dialled in as
normal. Upon reaching the next entry in the sequence, normal behaviour
resumes so there will be a phase of waiting for equilibrium,
followed potentially by normal dialling in of further progTensors in
the sequence, if there are any more in the sequence.
To use it, you probably want to supply an ansatz file with its
currDialInFactor CHANGED TO = 0. See main() for more details, including the
intended use case. */
ForInitialPortionOfProgTensorsSequence_DialProgTauButJumpProgMetricAndProgSecFF = false;


/* If settings.dialInFromAnsatzMetricAndSecFF == true AND an ansatz data file
is being used, the state of dial-in given by the header line in the ansatz
file is ignored, and instead a new dialling in phase is started from
whatever the *calculated* metric and secFF are in the ansatz state.
Tau is not a calculable geometric quantity so that we still dial in from
1.0 as usual. I can see an argument for just setting it to the programmed
value immediately too, but it should make almost no difference anyway.
This setting is very handy if you can only make an
approximate guess at a solution, and want to start from there and see
where things go without explosive dynamics.*/
dialInFromAnsatzMetricAndSecFF = false;


/* Variables used to control the programmed properties' time variation.
This is not necessarily directly physical, especially for a fast optical
activation instead of slow heating; the idea here is to gradually `dial in'
the programmed (energetically favoured) metric and second fundamental form.
This prevents anything too explosive happening the code, and can be used to
make the simulation quasistatic (which can help avoid undesired isometries
for example), though it may not be necessary.
The range between 0, and 1 is split into a sequence of discrete values based
on the chosen settings.DialInResolution. The dial-in factor will then
evolve linearly from one such value to the next, over
settings.DialInStepTime. After each such step, the value is held constant
until equilibrium is reached (to within the chosen tolerance). In the
'waiting' stage, the check for equilibrium occurs at a rate determined by
the tunable (and dimensionless)
settings.TimeBetweenEquilChecksPrefactor in the settings file.
TimeBetweenEquilChecks will be set to this value * settings.DialInStepTime.
settings.DialInStepTime is determined by the code so as to approximately
equal the characteristic decay time for the longest wavelength bending mode
when it is critically damped. The value can be tuned in the settings file
with a dimensionless prefactor. */
DialInResolution = 1.1;
TimeBetweenEquilChecksPrefactor = 0.01;
DialInStepTimePrefactor = 1.0;


// Amount of time (from start) that 'prod' force should be applied for
ProdForceTime = 0.0;

/* Factor determining strength of prod force. Values less than 0.01 are
probably recommended. */
ProdStrength = 0.0;

/* Amount of time (from start) that simple downward load force should be
applied for (to nodes with loadIndicator = true, set via input data file). */
LoadForceTime = 0.0;

/* Factor determining strength of load force, which has magnitude
LoadStrength*ShearModulus*ApproxMinInitElemSize*SheetThickness. */
LoadStrength = 0.0

/* Bool determining whether to perturb node positions with a small amount of
random noise just before dynamical evolution begins, to 'break away' from
an initial planar geometry, for example. */
PerturbInitialPositionsWithRandomNoise = true;


/* Bool determining whether to clamp whole boundary in addition to the clamp
indicators given in the input data file. */
ClampBoundary = false;

/* Numerical damping factor, such that damping force on a node is equal to
-mass*velocity*NumDampFactor/InitDensity
The value is chosen based on a toy stretching + bending model, so as to
approximately critically damp the longest wavelength bending mode. The
value can be tuned from the settings file using two dimensionless prefactors.
The first is used during dialling in, the second is used instead when waiting
for equilibrium.*/
DampingPrefactor1 = 40.0;
DampingPrefactor2 = 40.0;

/* Dimensionless number which modifies the bending energy density in the
*spirit* of the Gent 3D elastic energy. This parameter is *analogous* to the
original Gent parameter - not the same! Let the usual bend energy density
that is ~ curvature^2 be called Wb. The energy density modification is
such that for Wb below some scale (i.e. for suitably low curvatures), the
bend energy density used is Wb to a very good approx. If Wb is bigger than
some scale, the bend energy density is taken to be a function of Wb, such
that it grows much more sharply with curvature. This is intended to reflect
the physical fact that curvatures on the scale of the thickness should be
much more strongly penalised than they are by Wb. Thus the energy
density scale where the behaviour transitions should be something like Wb
evaluated for a curvature of 1/thickness. We take it to be that scale,
multiplied by the tunable GentFactor below, which should therefore be rougly
O(1). We generally use values between 1 and 10.*/
GentFactor = 1.0;

/* Prefactor (analagous to CFL number) in time step calculation, chosen
empirically to give good results, avoiding bad behaviour such as inversion
of elements. */
TimeStepPrefactor = 0.8;


/* Initial sheet thickness, which determines the balance between the
stretching and bending energies. */
SheetThickness = 0.005; // Latest value for reference-state thickness 'matching' Joselle.

// Shear modulus.
ShearModulus = 1.0;

// Poisson Ratio of sheet material.
PoissonRatio = 0.5;

// Initial (reference) state density.
InitDensity = 1.0;


/* Factor to determine the threshold for the allowed condition number of the
matrices which are inverted in finding the second fundamental form
coefficients. Any tempMatForPatchSecDerivs with a condition number greater
than PatchMatrixDimensionlessConditioningThreshold divided by the patch's
approximate linear size^2 will not be used, and an alternative will be found
instead. Worse meshes may require higher values to accept any of the
possible patches. In general, choose as low a value as possible that
allows all triangles to find a patch successfully.*/
PatchMatrixDimensionlessConditioningThreshold  = 10.0//20.0//4.0;//56.0 for face







